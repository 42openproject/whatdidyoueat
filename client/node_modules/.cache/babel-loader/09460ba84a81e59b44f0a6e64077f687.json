{"ast":null,"code":"var _jsxFileName = \"/Users/dhyeon/som/whatdidyoueat/client/src/MainPageView/MainCalendar.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Calendar from 'react-calendar';\nimport '../stylesheets/MainCalendar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MainCalendar = ({\n  clickedDay,\n  setClickedDay\n}) => {\n  _s();\n\n  const [dateVal, setDateVal] = useState(new Date());\n  const [monthVal, setMonthVal] = useState(new Date());\n  const [postedDate, setPostedDate] = useState([]); // 달력에서 날짜 선택\n\n  const onClickDay = e => {\n    setClickedDay(e);\n  };\n\n  const setPostedDay = allday => {\n    // console.log(view);\n    if (postedDate.find(d => d === allday.date.getDate() && allday.activeStartDate.getMonth() === allday.date.getMonth())) return 'calendal--posted-date';\n    return '';\n  }; // test api 포스팅된 날짜 달력에 표시하기\n\n\n  useEffect(async () => {\n    const response = await axios.get(`http://localhost:8000/calendar/${monthVal.getMonth() + 1}`);\n    console.log(response.data.data);\n    setPostedDate(response.data.data);\n  }, [monthVal]); // 월 화살표 눌러서 바꿀때마다 요청받도록\n  // 달력 년.월 표시 포맷\n\n  const testFormat = () => {\n    return new Intl.DateTimeFormat('ko-KR', {\n      year: 'numeric',\n      month: 'numeric'\n    }).format(monthVal);\n  }; // 달력에 화살표 누를때 현재 월 표시\n\n\n  const onActiveStartDateChange = data => {\n    console.log(data);\n    const oldDate = dateVal;\n    if (data.action !== 'onChange') setMonthVal(data.activeStartDate);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Calendar // className=\"main-calendar\"\n    , {\n      onChange: setDateVal,\n      value: dateVal,\n      maxDate: new Date(),\n      locale: \"en-US\",\n      onClickDay: onClickDay // formatMonthYear={() =>\n      //   new Intl.DateTimeFormat('ko-KR', {\n      //     year: 'numeric',\n      //     month: 'numeric',\n      //   }).format(dateVal)\n      // }\n      ,\n      formatMonthYear: testFormat,\n      tileClassName: setPostedDay,\n      onActiveStartDateChange: onActiveStartDateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MainCalendar, \"8g9YuuUAvChs3pFaQLDQ/+Eitqk=\");\n\n_c = MainCalendar;\nexport default MainCalendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainCalendar\");","map":{"version":3,"sources":["/Users/dhyeon/som/whatdidyoueat/client/src/MainPageView/MainCalendar.js"],"names":["useState","useEffect","axios","Calendar","MainCalendar","clickedDay","setClickedDay","dateVal","setDateVal","Date","monthVal","setMonthVal","postedDate","setPostedDate","onClickDay","e","setPostedDay","allday","find","d","date","getDate","activeStartDate","getMonth","response","get","console","log","data","testFormat","Intl","DateTimeFormat","year","month","format","onActiveStartDateChange","oldDate","action"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAO,iCAAP;;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAmC;AAAA;;AACtD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAIS,IAAJ,EAAD,CAAtC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAIS,IAAJ,EAAD,CAAxC;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C,CAHsD,CAKtD;;AACA,QAAMc,UAAU,GAAGC,CAAC,IAAI;AACtBT,IAAAA,aAAa,CAACS,CAAD,CAAb;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAGC,MAAM,IAAI;AAC7B;AACA,QACEL,UAAU,CAACM,IAAX,CACEC,CAAC,IACCA,CAAC,KAAKF,MAAM,CAACG,IAAP,CAAYC,OAAZ,EAAN,IACAJ,MAAM,CAACK,eAAP,CAAuBC,QAAvB,OAAsCN,MAAM,CAACG,IAAP,CAAYG,QAAZ,EAH1C,CADF,EAOE,OAAO,uBAAP;AACF,WAAO,EAAP;AACD,GAXD,CAVsD,CAuBtD;;;AACAtB,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMuB,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CACpB,kCAAiCf,QAAQ,CAACa,QAAT,KAAsB,CAAE,EADrC,CAAvB;AAIAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAAT,CAAcA,IAA1B;AACAf,IAAAA,aAAa,CAACW,QAAQ,CAACI,IAAT,CAAcA,IAAf,CAAb;AACD,GAPQ,EAON,CAAClB,QAAD,CAPM,CAAT,CAxBsD,CA+BtC;AAEhB;;AACA,QAAMmB,UAAU,GAAG,MAAM;AACvB,WAAO,IAAIC,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;AACtCC,MAAAA,IAAI,EAAE,SADgC;AAEtCC,MAAAA,KAAK,EAAE;AAF+B,KAAjC,EAGJC,MAHI,CAGGxB,QAHH,CAAP;AAID,GALD,CAlCsD,CAyCtD;;;AACA,QAAMyB,uBAAuB,GAAGP,IAAI,IAAI;AACtCF,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,UAAMQ,OAAO,GAAG7B,OAAhB;AACA,QAAIqB,IAAI,CAACS,MAAL,KAAgB,UAApB,EAAgC1B,WAAW,CAACiB,IAAI,CAACN,eAAN,CAAX;AACjC,GAJD;;AAMA,sBACE;AAAA,2BACE,QAAC,QAAD,CACE;AADF;AAEE,MAAA,QAAQ,EAAEd,UAFZ;AAGE,MAAA,KAAK,EAAED,OAHT;AAIE,MAAA,OAAO,EAAE,IAAIE,IAAJ,EAJX;AAKE,MAAA,MAAM,EAAC,OALT;AAME,MAAA,UAAU,EAAEK,UANd,CAOE;AACA;AACA;AACA;AACA;AACA;AAZF;AAaE,MAAA,eAAe,EAAEe,UAbnB;AAcE,MAAA,aAAa,EAAEb,YAdjB;AAeE,MAAA,uBAAuB,EAAEmB;AAf3B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAqBD,CArED;;GAAM/B,Y;;KAAAA,Y;AAuEN,eAAeA,YAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Calendar from 'react-calendar';\nimport '../stylesheets/MainCalendar.css';\n\nconst MainCalendar = ({ clickedDay, setClickedDay }) => {\n  const [dateVal, setDateVal] = useState(new Date());\n  const [monthVal, setMonthVal] = useState(new Date());\n  const [postedDate, setPostedDate] = useState([]);\n\n  // 달력에서 날짜 선택\n  const onClickDay = e => {\n    setClickedDay(e);\n  };\n\n  const setPostedDay = allday => {\n    // console.log(view);\n    if (\n      postedDate.find(\n        d =>\n          d === allday.date.getDate() &&\n          allday.activeStartDate.getMonth() === allday.date.getMonth(),\n      )\n    )\n      return 'calendal--posted-date';\n    return '';\n  };\n\n  // test api 포스팅된 날짜 달력에 표시하기\n  useEffect(async () => {\n    const response = await axios.get(\n      `http://localhost:8000/calendar/${monthVal.getMonth() + 1}`,\n    );\n\n    console.log(response.data.data);\n    setPostedDate(response.data.data);\n  }, [monthVal]); // 월 화살표 눌러서 바꿀때마다 요청받도록\n\n  // 달력 년.월 표시 포맷\n  const testFormat = () => {\n    return new Intl.DateTimeFormat('ko-KR', {\n      year: 'numeric',\n      month: 'numeric',\n    }).format(monthVal);\n  };\n\n  // 달력에 화살표 누를때 현재 월 표시\n  const onActiveStartDateChange = data => {\n    console.log(data);\n    const oldDate = dateVal;\n    if (data.action !== 'onChange') setMonthVal(data.activeStartDate);\n  };\n\n  return (\n    <>\n      <Calendar\n        // className=\"main-calendar\"\n        onChange={setDateVal}\n        value={dateVal}\n        maxDate={new Date()}\n        locale=\"en-US\"\n        onClickDay={onClickDay}\n        // formatMonthYear={() =>\n        //   new Intl.DateTimeFormat('ko-KR', {\n        //     year: 'numeric',\n        //     month: 'numeric',\n        //   }).format(dateVal)\n        // }\n        formatMonthYear={testFormat}\n        tileClassName={setPostedDay}\n        onActiveStartDateChange={onActiveStartDateChange}\n      />\n    </>\n  );\n};\n\nexport default MainCalendar;\n"]},"metadata":{},"sourceType":"module"}